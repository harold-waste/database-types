{"version":3,"sources":["../../../src/bin/commands/generate-types.js"],"names":["command","desc","builder","yargs","options","description","type","demand","dialect","choices","schema","default","handler","argv","defaultFormatTypeName","tableName","defaultFormatPropertyName","columnName","filterColumns","columnFilter","Function","formatTypeName","typeNameFormatter","formatPropertyName","propertyNameFormatter","createProperties","columns","filteredColumns","filter","column","map","name","nullable","typeName","connection","databaseConnectionUri","unnormalizedColumns","includeMaterializedViews","concat","normalizedColumns","properties","console","log","end"],"mappings":"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","file":"generate-types.js","sourcesContent":["// @flow\n\n/* eslint-disable no-new-func */\n\nimport {\n  camelCase,\n  upperFirst,\n} from 'lodash';\nimport {\n  createConnection\n} from 'mightyql';\nimport type {\n  ColumnType,\n  TypePropertyType\n} from '../../types';\nimport {\n  getDatabaseTableColumns,\n  getDatabaseMaterializedViewColumns\n} from '../../queries';\nimport {\n  generateFlowTypeDocument,\n  generateTypescriptTypeDocument,\n  mapFlowType,\n  mapTypescriptType,\n  normalizeColumns,\n} from '../../utilities';\n\nexport const command = 'generate-types';\nexport const desc = 'Generate types for a Postgres database.';\n\ntype ConfigurationType = {|\n  +columnFilter: string,\n  +databaseConnectionUri: string,\n  +dialect: 'flow' | 'typescript',\n  +schema: 'public',\n  +includeMaterializedViews: boolean,\n  +propertyNameFormatter: string | null,\n  +typeNameFormatter: string | null\n|};\n\nexport const builder = (yargs: *): void => {\n  yargs\n    .options({\n      'column-filter': {\n        description: 'Function used to filter columns. Function is constructed using `new Function`. Function receives table name as the first parameter and column name as the second parameter (parameter names are \"tableName\" and \"columnName\").',\n        type: 'string'\n      },\n      'database-connection-uri': {\n        demand: true\n      },\n      dialect: {\n        choices: [\n          'flow',\n          'typescript'\n        ],\n        demand: true\n      },\n      schema: {\n        demand: true\n      },\n      'include-materialized-views': {\n        default: true,\n        type: 'boolean'\n      },\n      'property-name-formatter': {\n        default: null,\n        description: 'Function used to format property name. Function is constructed using `new Function`. Function receives column name as the first parameter (parameter name is \"columnName\"). The default behaviour is to (lower) camelCase the column name.',\n        type: 'string'\n      },\n      'type-name-formatter': {\n        default: null,\n        description: 'Function used to format type name. Function is constructed using `new Function`. Function receives table name as the first parameter (parameter name is \"tableName\"). The default behaviour is to (upper) CamelCase the table name and prefix it with \"PSQL\".',\n        type: 'string'\n      }\n    });\n};\n\ntype ColumnFilterType = (tableName: string, columnName: string) => boolean;\ntype FormatterType = (name: string) => string;\n\nexport const handler = async (argv: ConfigurationType): Promise<void> => {\n  const defaultFormatTypeName = (tableName: string): string => {\n    return 'PSQL' + upperFirst(camelCase(tableName));\n  };\n\n  const defaultFormatPropertyName = (columnName: string): string => {\n    return camelCase(columnName);\n  };\n\n  // eslint-disable-next-line no-extra-parens\n  const filterColumns: ColumnFilterType = (argv.columnFilter ? new Function('tableName', 'columnName', argv.columnFilter) : null: any);\n\n  // eslint-disable-next-line no-extra-parens\n  const formatTypeName: FormatterType = (argv.typeNameFormatter ? new Function('tableName', argv.typeNameFormatter) : defaultFormatTypeName: any);\n  // eslint-disable-next-line no-extra-parens\n  const formatPropertyName: FormatterType = (argv.propertyNameFormatter ? new Function('columnName', argv.propertyNameFormatter) : defaultFormatPropertyName: any);\n\n  const createProperties = (columns: $ReadOnlyArray<ColumnType>): $ReadOnlyArray<TypePropertyType> => {\n    let filteredColumns = columns;\n\n    if (filterColumns) {\n      filteredColumns = filteredColumns.filter((column) => {\n        // $FlowFixMe\n        return filterColumns(column.tableName, column.columnName);\n      });\n    }\n\n    return filteredColumns.map((column) => {\n      return {\n        name: formatPropertyName(column.columnName),\n        nullable: column.nullable,\n        type: argv.dialect === 'flow' ? mapFlowType(column) : mapTypescriptType(column),\n        typeName: formatTypeName(column.tableName),\n      };\n    });\n  };\n\n  const connection = await createConnection(argv.databaseConnectionUri);\n\n  let unnormalizedColumns;\n\n  unnormalizedColumns = await getDatabaseTableColumns(connection, argv.schema);\n\n  if (argv.includeMaterializedViews) {\n    unnormalizedColumns = unnormalizedColumns.concat(await getDatabaseMaterializedViewColumns(connection));\n  }\n\n  const normalizedColumns = normalizeColumns(unnormalizedColumns);\n\n  const properties = createProperties(normalizedColumns);\n\n  // eslint-disable-next-line no-console\n  if (argv.dialect === 'flow') console.log(generateFlowTypeDocument(properties));\n  // eslint-disable-next-line no-console\n  if (argv.dialect === 'typescript') console.log(generateTypescriptTypeDocument(properties));\n\n  await connection.end();\n};\n"]}