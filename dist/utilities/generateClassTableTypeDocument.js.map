{"version":3,"sources":["../../src/utilities/generateClassTableTypeDocument.js"],"names":["generateClassTableTypeDeclarationBody","properties","sortedProperties","propertyDeclarations","column","nullable","colon","primary","constraintType","push","name","type","join","columns","groupedProperties","typeDeclarations","typeNames","Object","keys","sort","typeName","typeProperties","typeDeclaration","tableName","importText"],"mappings":";;;;;;AAEA;;AAQA,MAAMA,wCAAyCC,UAAD,IAA0D;AACtG,QAAMC,mBAAmB,oBAAOD,UAAP,EAAmB,MAAnB,CAAzB;;AAEA,QAAME,uBAAuB,EAA7B;;AAHsG;AAAA;AAAA;;AAAA;AAKtG,yBAAqBD,gBAArB,8HAAuC;AAAA,YAA5BE,MAA4B;;AACrC,YAAMC,WAAWD,OAAOC,QAAP,GAAkB,qBAAlB,GAA0C,EAA3D;AACA,YAAMC,QAAQF,OAAOC,QAAP,GAAkB,KAAlB,GAA0B,IAAxC;AACA,YAAME,UAAWH,OAAOI,cAAP,KAA0B,aAA3B,GAA4C,mBAA5C,GAAkE,EAAlF;AACAL,2BAAqBM,IAArB,CAA0B,eAAcF,OAAd,GAAuB,GAAjD;AACAJ,2BAAqBM,IAArB,CAA0B,cAAcL,OAAOM,IAArB,GAA4BJ,KAA5B,GAAoCF,OAAOO,IAA3C,GAAkDN,QAAlD,GAA6D,GAAvF;AACD;AAXqG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAatG,SAAOF,qBAAqBS,IAArB,CAA0B,IAA1B,CAAP;AACD,CAdD;;kBAiBEC,OADa,IAEF;AACX,QAAMC,oBAAoB,qBAAQD,OAAR,EAAiB,UAAjB,CAA1B;;AAEA,QAAME,mBAAmB,EAAzB;;AAEA,QAAMC,YAAYC,OAAOC,IAAP,CAAYJ,iBAAZ,EAA+BK,IAA/B,EAAlB;;AALW;AAAA;AAAA;;AAAA;AAOX,0BAAuBH,SAAvB,mIAAkC;AAAA,YAAvBI,QAAuB;;AAChC,YAAMC,iBAAiBP,kBAAkBM,QAAlB,CAAvB;;AAEA,YAAME,kBAAmB;UACnBD,eAAe,CAAf,EAAkBE,SAAU;eACvBH,QAAS;EACtBpB,sCAAsCqB,cAAtC,CAAsD;GAHpD;;AAMAN,uBAAiBN,IAAjB,CAAsBa,eAAtB;AACD;AAjBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBX,QAAME,aAAa,0DAAnB;AACA,SAAOA,aAAaT,iBAAiBH,IAAjB,CAAsB,IAAtB,CAApB;AACD,C","file":"generateClassTableTypeDocument.js","sourcesContent":["// @flow\n\nimport {\n  groupBy,\n  sortBy,\n} from 'lodash';\nimport type {\n  TypePropertyType\n} from '../types';\n\nconst generateClassTableTypeDeclarationBody = (properties: $ReadOnlyArray<TypePropertyType>): string => {\n  const sortedProperties = sortBy(properties, 'name');\n\n  const propertyDeclarations = [];\n\n  for (const column of sortedProperties) {\n    const nullable = column.nullable ? ' | null | undefined' : '';\n    const colon = column.nullable ? '?: ' : ': ';\n    const primary = (column.constraintType === 'PRIMARY KEY') ? '{ primary: true }' : '';\n    propertyDeclarations.push('\\t@Column('+ primary +')');\n    propertyDeclarations.push('\\tpublic ' + column.name + colon + column.type + nullable + ';');\n  }\n\n  return propertyDeclarations.join('\\n');\n};\n\nexport default (\n  columns: $ReadOnlyArray<TypePropertyType>\n): string => {\n  const groupedProperties = groupBy(columns, 'typeName');\n\n  const typeDeclarations = [];\n\n  const typeNames = Object.keys(groupedProperties).sort();\n\n  for (const typeName of typeNames) {\n    const typeProperties = groupedProperties[typeName];\n\n    const typeDeclaration = `\n@Table(\"${typeProperties[0].tableName}\")\nexport class ${typeName} {\n${generateClassTableTypeDeclarationBody(typeProperties)}\n};`;\n\n    typeDeclarations.push(typeDeclaration);\n  }\n  const importText = \"import { Column, Table } from '@wwwouter/typed-knex'; \\n\"\n  return importText + typeDeclarations.join('\\n');\n};\n"]}