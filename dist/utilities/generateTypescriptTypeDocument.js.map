{"version":3,"sources":["../../src/utilities/generateTypescriptTypeDocument.js"],"names":["generateTypescriptTypeDeclarationBody","properties","sortedProperties","propertyDeclarations","column","nullable","push","name","type","join","columns","groupedProperties","typeDeclarations","typeNames","Object","keys","sort","typeName","typeProperties","typeDeclaration","split"],"mappings":";;;;;;AAEA;;AAQA,MAAMA,wCAAyCC,UAAD,IAA0D;AACtG,QAAMC,mBAAmB,oBAAOD,UAAP,EAAmB,MAAnB,CAAzB;;AAEA,QAAME,uBAAuB,EAA7B;;AAHsG;AAAA;AAAA;;AAAA;AAKtG,yBAAqBD,gBAArB,8HAAuC;AAAA,YAA5BE,MAA4B;;AACrC,YAAMC,WAAWD,OAAOC,QAAP,GAAkB,qBAAlB,GAA0C,EAA3D;AACAF,2BAAqBG,IAArB,CAA0BF,OAAOG,IAAP,GAAc,IAAd,GAAqBH,OAAOI,IAA5B,GAAmCH,QAA7D;AACD;AARqG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUtG,SAAOF,qBAAqBM,IAArB,CAA0B,IAA1B,CAAP;AACD,CAXD;;kBAcEC,OADa,IAEF;AACX,QAAMC,oBAAoB,qBAAQD,OAAR,EAAiB,UAAjB,CAA1B;;AAEA,QAAME,mBAAmB,EAAzB;;AAEA,QAAMC,YAAYC,OAAOC,IAAP,CAAYJ,iBAAZ,EAA+BK,IAA/B,EAAlB;;AALW;AAAA;AAAA;;AAAA;AAOX,0BAAuBH,SAAvB,mIAAkC;AAAA,YAAvBI,QAAuB;;AAChC,YAAMC,iBAAiBP,kBAAkBM,QAAlB,CAAvB;;AAEA,YAAME,kBAAmB;OACtBF,QAAS;IACZjB,sCAAsCkB,cAAtC,EAAsDE,KAAtD,CAA4D,IAA5D,EAAkEX,IAAlE,CAAuE,OAAvE,CAAgF;GAFhF;;AAKAG,uBAAiBN,IAAjB,CAAsBa,eAAtB;AACD;AAhBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBX,SAAOP,iBAAiBH,IAAjB,CAAsB,IAAtB,CAAP;AACD,C","file":"generateTypescriptTypeDocument.js","sourcesContent":["// @flow\n\nimport {\n  groupBy,\n  sortBy,\n} from 'lodash';\nimport type {\n  TypePropertyType\n} from '../types';\n\nconst generateTypescriptTypeDeclarationBody = (properties: $ReadOnlyArray<TypePropertyType>): string => {\n  const sortedProperties = sortBy(properties, 'name');\n\n  const propertyDeclarations = [];\n\n  for (const column of sortedProperties) {\n    const nullable = column.nullable ? ' | null | undefined' : '';\n    propertyDeclarations.push(column.name + ': ' + column.type + nullable);\n  }\n\n  return propertyDeclarations.join('\\n');\n};\n\nexport default (\n  columns: $ReadOnlyArray<TypePropertyType>\n): string => {\n  const groupedProperties = groupBy(columns, 'typeName');\n\n  const typeDeclarations = [];\n\n  const typeNames = Object.keys(groupedProperties).sort();\n\n  for (const typeName of typeNames) {\n    const typeProperties = groupedProperties[typeName];\n\n    const typeDeclaration = `\ntype ${typeName} = {\n  ${generateTypescriptTypeDeclarationBody(typeProperties).split('\\n').join(',\\n  ')}\n};`;\n\n    typeDeclarations.push(typeDeclaration);\n  }\n\n  return typeDeclarations.join('\\n');\n};\n"]}