{"version":3,"sources":["../../src/utilities/mapFlowType.js"],"names":["debug","databaseTypeName","constraintType","constraintDef","includes","re","types","match","exec","push","_","join","map","item","test"],"mappings":";;;;;;AAEA;;;;AACA;;;;AAOA,MAAMA,QAAQ,4BAAY,aAAZ,CAAd;;kBAEe,CAACC,gBAAD,EAA2BC,cAA3B,EAA4DC,aAA5D,KAA+F;AAC5G,MAAIA,iBAAiBA,cAAcC,QAAd,CAAuB,OAAvB,CAArB,EAAsD;AACpD,UAAMC,KAAK,aAAX;AACA,UAAMC,QAAQ,EAAd;AACA,QAAIC,QAAQF,GAAGG,IAAH,CAAQL,aAAR,CAAZ;AACA,WAAOI,SAAS,IAAhB,EAAsB;AACpBD,YAAMG,IAAN,CAAWF,MAAM,CAAN,CAAX;AACAA,cAAQF,GAAGG,IAAH,CAAQL,aAAR,CAAR;AACD;AACD,WAAQ,IAAGO,iBAAEC,IAAF,CAAOD,iBAAEE,GAAF,CAAMN,KAAN,EAAcO,IAAD,IAAU,IAAGA,IAAK,GAA/B,CAAP,EAA2C,KAA3C,CAAkD,GAA7D;AACD;;AAED,MAAI,oBAAoBC,IAApB,CAAyBb,gBAAzB,CAAJ,EAAgD;AAC9C,WAAO,QAAP;AACD;;AAED,MAAI,wCAAwCa,IAAxC,CAA6Cb,gBAA7C,CAAJ,EAAoE;AAClE,WAAO,QAAP;AACD;;AAED,MAAIA,qBAAqB,SAAzB,EAAoC;AAClC,WAAO,SAAP;AACD;;AAED,MAAI,iCAAiCa,IAAjC,CAAsCb,gBAAtC,CAAJ,EAA6D;AAC3D,QAAKC,mBAAmB,aAAnB,IAAoCA,mBAAmB,aAA5D,EAA4E,OAAO,IAAP;AAC5E,WAAO,QAAP;AACD;;AAED,MAAI,mCAAmCY,IAAnC,CAAwCb,gBAAxC,CAAJ,EAA+D;AAC7D,WAAO,MAAP;AACD;;AAED,MAAI,mBAAmBa,IAAnB,CAAwBb,gBAAxB,CAAJ,EAA+C;AAC7C,WAAO,eAAP;AACD;;AAEDD,QAAM,cAAN,EAAsBC,gBAAtB;AACA,SAAO,KAAP;AACD,C","file":"mapFlowType.js","sourcesContent":["// @flow\n\nimport _ from 'lodash';\nimport {\n  createDebug\n} from '../factories';\nimport type {\n  ConstraintType,\n} from '../types';\n\nconst debug = createDebug('mapFlowType');\n\nexport default (databaseTypeName: string, constraintType: ?ConstraintType, constraintDef: ?string): string => {\n  if (constraintDef && constraintDef.includes('ARRAY')) {\n    const re = /'([\\w]*)'+/g\n    const types = [];\n    let match = re.exec(constraintDef);\n    while (match != null) {\n      types.push(match[1]);\n      match = re.exec(constraintDef);\n    }\n    return `(${_.join(_.map(types, (item) =>`'${item}'`), ' | ')})`;\n  }\n\n  if (/^(?:json.*)(\\s|$)/.test(databaseTypeName)) {\n    return 'Object';\n  }\n\n  if (/^(?:text|character|coordinates)(\\s|$)/.test(databaseTypeName)) {\n    return 'string';\n  }\n\n  if (databaseTypeName === 'boolean') {\n    return 'boolean';\n  }\n\n  if (/^(?:bigint|integer|real)(\\s|$)/.test(databaseTypeName)) {\n    if ((constraintType === 'PRIMARY KEY' || constraintType === 'FOREIGN KEY')) return 'Id';\n    return 'number';\n  }\n\n  if (/^(?:timestamp|date|time.*)(\\s|$)/.test(databaseTypeName)) {\n    return 'Date';\n  }\n\n  if (/^(?:ARRAY)(\\s|$)/.test(databaseTypeName)) {\n    return 'Array<string>';\n  }\n\n  debug('unknown type', databaseTypeName);\n  return 'any';\n};\n"]}