{"version":3,"sources":["../../src/utilities/mapClassTableType.js"],"names":["debug","column","constraintDef","columnName","databaseType","constraintType","test","postfix","_","last","split","snakeCase","includes","re","types","match","exec","push","join","map","item"],"mappings":";;;;;;AAEA;;;;AACA;;;;AAQA,MAAMA,QAAQ,4BAAY,mBAAZ,CAAd;;kBAEgBC,MAAD,IAAgC;AAAA,QACrCC,aADqC,GACuBD,MADvB,CACrCC,aADqC;AAAA,QACtBC,UADsB,GACuBF,MADvB,CACtBE,UADsB;AAAA,QACVC,YADU,GACuBH,MADvB,CACVG,YADU;AAAA,QACIC,cADJ,GACuBJ,MADvB,CACII,cADJ;AAE7C;;AACA,MAAI,YAAYC,IAAZ,CAAiBH,UAAjB,KAAgCA,eAAe,QAAnD,EAA6D,OAAO,eAAP;AAC7D,MAAI,cAAcG,IAAd,CAAmBH,UAAnB,KAAkCA,eAAe,UAArD,EAAiE,OAAO,iBAAP;;AAEjE,QAAMI,UAAUC,iBAAEC,IAAF,CAAOD,iBAAEE,KAAF,CAAQF,iBAAEG,SAAF,CAAYR,UAAZ,CAAR,EAAiC,GAAjC,CAAP,CAAhB;;AAEA,MAAID,iBAAiBA,cAAcU,QAAd,CAAuB,OAAvB,CAArB,EAAsD;AACpD,UAAMC,KAAK,aAAX;AACA,UAAMC,QAAQ,EAAd;AACA,QAAIC,QAAQF,GAAGG,IAAH,CAAQd,aAAR,CAAZ;AACA,WAAOa,SAAS,IAAhB,EAAsB;AACpBD,YAAMG,IAAN,CAAWF,MAAM,CAAN,CAAX;AACAA,cAAQF,GAAGG,IAAH,CAAQd,aAAR,CAAR;AACD;AACD,WAAQ,IAAGM,iBAAEU,IAAF,CAAOV,iBAAEW,GAAF,CAAML,KAAN,EAAcM,IAAD,IAAU,IAAGA,IAAK,GAA/B,CAAP,EAA2C,KAA3C,CAAkD,GAA7D;AACD;;AAED,MAAI,oBAAoBd,IAApB,CAAyBF,YAAzB,CAAJ,EAA4C;AAC1C,WAAO,QAAP;AACD;;AAED,MAAI,wCAAwCE,IAAxC,CAA6CF,YAA7C,CAAJ,EAAgE;AAC9D,WAAO,QAAP;AACD;;AAED,MAAIA,iBAAiB,SAArB,EAAgC;AAC9B,WAAO,SAAP;AACD;;AAED,MAAI,wCAAwCE,IAAxC,CAA6CF,YAA7C,CAAJ,EAAgE;AAC9D,QAAIG,YAAY,IAAZ,IAAoBA,YAAY,KAApC,EAA2C,OAAO,IAAP;AAC3C,QAAKF,mBAAmB,aAAnB,IAAoCA,mBAAmB,aAA5D,EAA4E,OAAO,IAAP;AAC5E,WAAO,QAAP;AACD;;AAED,MAAI,mCAAmCC,IAAnC,CAAwCF,YAAxC,CAAJ,EAA2D;AACzD,WAAO,MAAP;AACD;;AAED,MAAI,mBAAmBE,IAAnB,CAAwBF,YAAxB,CAAJ,EAA2C;AACzC,QAAIG,YAAY,IAAZ,IAAoBA,YAAY,KAApC,EAA2C,OAAO,MAAP;AAC3C,WAAO,UAAP;AACD;;AAEDP,QAAM,cAAN,EAAsBI,YAAtB;AACA,SAAO,KAAP;AACD,C","file":"mapClassTableType.js","sourcesContent":["// @flow\n\nimport _ from 'lodash';\nimport {\n  createDebug\n} from '../factories';\nimport type {\n  ConstraintType,\n  ColumnType,\n} from '../types';\n\nconst debug = createDebug('mapTypescriptType');\n\nexport default (column: ColumnType): string => {\n  const { constraintDef, columnName, databaseType, constraintType } = column;\n  // Custom\n  if (/.*Volume$/.test(columnName) || columnName === 'volume') return 'GQLVolumeEnum';\n  if (/.*Currency$/.test(columnName) || columnName === 'currency') return 'GQLCurrencyEnum';\n\n  const postfix = _.last(_.split(_.snakeCase(columnName), '_'));\n\n  if (constraintDef && constraintDef.includes('ARRAY')) {\n    const re = /'([\\w]*)'+/g\n    const types = [];\n    let match = re.exec(constraintDef);\n    while (match != null) {\n      types.push(match[1]);\n      match = re.exec(constraintDef);\n    }\n    return `(${_.join(_.map(types, (item) =>`'${item}'`), ' | ')})`;\n  }\n\n  if (/^(?:json.*)(\\s|$)/.test(databaseType)) {\n    return 'Object';\n  }\n\n  if (/^(?:text|character|coordinates)(\\s|$)/.test(databaseType)) {\n    return 'string';\n  }\n\n  if (databaseType === 'boolean') {\n    return 'boolean';\n  }\n\n  if (/^(?:bigint|integer|real|double)(\\s|$)/.test(databaseType)) {\n    if (postfix === 'id' || postfix === 'ids') return 'Id';\n    if ((constraintType === 'PRIMARY KEY' || constraintType === 'FOREIGN KEY')) return 'Id';\n    return 'number';\n  }\n\n  if (/^(?:timestamp|date|time.*)(\\s|$)/.test(databaseType)) {\n    return 'Date';\n  }\n\n  if (/^(?:ARRAY)(\\s|$)/.test(databaseType)) {\n    if (postfix === 'id' || postfix === 'ids') return 'Id[]';\n    return 'string[]';\n  }\n\n  debug('unknown type', databaseType);\n  return 'any';\n};\n"]}